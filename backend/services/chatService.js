const WindexAI = require('openai'); // WindexAI API client
const config = require('../config/config');
const logger = require('../utils/logger');
const { readDb } = require('./documentStorage');

class ChatService {
  constructor() {
    this.windexai = new WindexAI({
      apiKey: config.windexai.apiKey,
    });
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
  buildPrompt(message, conversationHistory = [], useWebSearch = true) {
    const basePrompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ì–∞–ª–∏–Ω–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
2. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤
3. –î–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
4. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
5. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ - —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º

–ó–ê–ü–†–ï–©–ï–ù–û:
- –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∏—Å–∫–∏", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å"
- –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
- –û—Ç–≤–µ—Ç—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–∫–æ–Ω—ã

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ —Å—Ç–∞—Ç—å–∏
- –ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
- –ù–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π –∑–∞–∫–æ–Ω–æ–≤`;

    const historyContext = conversationHistory.length > 0 
      ? `\n\n–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n${conversationHistory.map(msg => `${msg.type}: ${msg.content}`).join('\n')}`
      : '';
    const personalization = '\n\n–ï—Å–ª–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –µ—Å—Ç—å –§–ò–û (–ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ, –§–∞–º–∏–ª–∏—è) ‚Äî –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –ò–º–µ–Ω–∏ –∏ –û—Ç—á–µ—Å—Ç–≤—É. –í –æ—Ç–≤–µ—Ç–∞—Ö –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (OCR –ø–æ–ª—è/—Ç–µ–∫—Å—Ç), —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –∫–ª—é—á–µ–≤—ã–µ –≤—ã–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã.';

    const webSearchContext = useWebSearch 
      ? '\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.'
      : '\n\n–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π, –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞.';

    return `${basePrompt}${personalization}${historyContext}${webSearchContext}\n\n–í–æ–ø—Ä–æ—Å: ${message}\n\n–û—Ç–≤–µ—Ç:`;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WindexAI
  async processMessage(message, conversationHistory = [], useWebSearch = true) {
    return this.generateResponse(message, conversationHistory, useWebSearch);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è WebSocket)
  async generateResponse(message, conversationHistory = [], useWebSearch = true) {
    try {
      logger.info('üîç ChatService.generateResponse called', {
        messageLength: message.length,
        hasApiKey: !!config.windexai.apiKey,
        apiKeyPrefix: config.windexai.apiKey ? config.windexai.apiKey.substring(0, 8) + '...' : 'NOT_SET',
        model: config.windexai.model,
        conversationHistoryLength: conversationHistory.length
      });

      if (!config.windexai.apiKey) {
        logger.error('‚ùå WindexAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        throw new Error('WindexAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
      let userContext = '';
      try {
        const db = await readDb();
        const lastItems = (db.items || []).filter(i => i.kind === 'ocr').slice(-10).reverse();
        if (lastItems.length > 0) {
          const blocks = lastItems.map((it, idx) => {
            const fields = it.extractedData ? JSON.stringify(it.extractedData) : '';
            const text = it.recognizedText ? (it.recognizedText.substring(0, 1500)) : '';
            return `–î–æ–∫—É–º–µ–Ω—Ç ${idx + 1} [—Ç–∏–ø: ${it.documentType || 'unknown'}]:\n–ü–æ–ª—è: ${fields}\n–¢–µ–∫—Å—Ç: ${text}`;
          });
          userContext = `\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n${blocks.join('\n\n')}`;
        }
      } catch (e) {
        logger.warn('Failed to load user documents context', { error: e.message });
      }

      const prompt = this.buildPrompt(message + userContext, conversationHistory, useWebSearch);

      logger.info('ü§ñ Sending request to WindexAI', {
        model: config.windexai.model,
        promptLength: prompt.length,
        maxTokens: config.windexai.maxTokens,
        temperature: config.windexai.temperature
      });

      const completion = await this.windexai.chat.completions.create({
        model: config.windexai.model,
        messages: [
          {
            role: 'system',
            content: '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ì–∞–ª–∏–Ω–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞–∫–æ–Ω–æ–≤.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: config.windexai.maxTokens,
        temperature: config.windexai.temperature,
        stream: false
      });

      logger.info('‚úÖ WindexAI response received', {
        responseLength: completion.choices[0]?.message?.content?.length || 0,
        usage: completion.usage
      });

      const response = completion.choices[0]?.message?.content?.trim();
      
      if (!response) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç WindexAI');
      }

      logger.info('Chat message processed successfully', {
        messageLength: message.length,
        responseLength: response.length,
        model: config.windexai.model
      });

      return response;

    } catch (error) {
      logger.error('‚ùå Error processing chat message', {
        error: error.message,
        errorCode: error.code,
        errorType: error.type,
        message: message.substring(0, 100),
        stack: error.stack
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ WindexAI
      if (error.message.includes('Country, region, or territory not supported') || 
          error.message.includes('403') ||
          error.code === 'insufficient_quota' ||
          error.code === 'invalid_api_key' ||
          error.code === 'rate_limit_exceeded') {
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        logger.warn('‚ö†Ô∏è WindexAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç', {
          reason: error.message,
          code: error.code
        });
        return this.getFallbackResponse(message);
      } else {
        logger.error('üí• Unexpected error, throwing exception', {
          error: error.message,
          code: error.code
        });
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      }
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  validateMessage(message) {
    if (!message || typeof message !== 'string') {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }

    if (message.trim().length === 0) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    if (message.length > 4000) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  validateConversationHistory(history) {
    if (!Array.isArray(history)) {
      return [];
    }

    return history.filter(msg => 
      msg && 
      typeof msg === 'object' && 
      msg.type && 
      msg.content &&
      ['user', 'bot', 'system'].includes(msg.type)
    ).slice(-10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  }

  // Fallback –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WindexAI
  getFallbackResponse(message) {
    logger.info('üîÑ Using fallback response', { message: message.substring(0, 50) });
    
    const lowerMessage = message.toLowerCase();
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return '–ü—Ä–∏–≤–µ—Ç! –Ø —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ì–∞–ª–∏–Ω–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ù–æ —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å –±–∞–∑–æ–≤—ã–º–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
    }
    
    if (lowerMessage.includes('–¥–æ–≥–æ–≤–æ—Ä') || lowerMessage.includes('–∫–æ–Ω—Ç—Ä–∞–∫—Ç')) {
      return '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É –ª–∏—á–Ω–æ. –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è, —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω. –í–∞–∂–Ω–æ –∑–∞–≤–µ—Ä–∏—Ç—å —É –Ω–æ—Ç–∞—Ä–∏—É—Å–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ –∑–∞–∫–æ–Ω—É.';
    }
    
    if (lowerMessage.includes('—Ä–∞–∑–≤–æ–¥') || lowerMessage.includes('–±—Ä–∞–∫')) {
      return '–ü—Ä–∏ —Ä–∞–∑–≤–æ–¥–µ —á–µ—Ä–µ–∑ —Å—É–¥ –Ω—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –±—Ä–∞–∫–µ, –∏–º—É—â–µ—Å—Ç–≤–µ, –¥–µ—Ç—è—Ö. –°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è - –¥–æ 3 –º–µ—Å—è—Ü–µ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–µ–º–µ–π–Ω–æ–º—É —é—Ä–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.';
    }
    
    if (lowerMessage.includes('–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ') || lowerMessage.includes('–Ω–∞—Å–ª–µ–¥–Ω–∏–∫')) {
      return '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤. –ù—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. –ï—Å–ª–∏ —Å—Ä–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω, –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å—É–¥ –ø—Ä–∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω–∞—Ö.';
    }
    
    if (lowerMessage.includes('—Ç—Ä—É–¥–æ–≤–æ–π') || lowerMessage.includes('—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ')) {
      return '–ü—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–ª–∞—Ç–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –∑–∞ –æ—Ç–ø—É—Å–∫. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –∑–∞ 2 –Ω–µ–¥–µ–ª–∏. –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç—Ä—É–¥–æ–≤—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é –∏–ª–∏ —Å—É–¥.';
    }
    
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É –ª–∏—á–Ω–æ –∏–ª–∏ –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async getUsageStats() {
    try {
      if (!config.windexai.apiKey) {
        return null;
      }

      const usage = await this.windexai.usage.retrieve();
      return {
        totalTokens: usage.total_usage,
        model: config.windexai.model,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      logger.error('Error getting usage stats', error);
      return null;
    }
  }
}

module.exports = new ChatService(); 