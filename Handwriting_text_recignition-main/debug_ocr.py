#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã OCR
"""

import sys
import os
import cv2
import numpy as np
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from OCR_scripts.recognition import OCRPredictor
from OCR_scripts.config import Config

def debug_ocr(image_path):
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return
    
    # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        return
    
    print(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
    print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {image.dtype}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    print(f"üìã –ê–ª—Ñ–∞–≤–∏—Ç: {config.alphabet[:50]}...")
    print(f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
    print(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏: {config.image_height}x{config.image_width}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model_path = os.path.join(os.path.dirname(__file__), 'models', 'best_model-0.6780.pt')
    print(f"üìÅ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {model_path}")
    
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return
    
    try:
        predictor = OCRPredictor(model_path, config)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        result = predictor.predict_single(image)
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø–∞–ø–∫—É
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–∞–ø–∫—É...")
        import tempfile
        import shutil
        
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            temp_image_path = os.path.join(temp_dir, 'test.jpg')
            cv2.imwrite(temp_image_path, image)
            print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_image_path}")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏
            predictions = predictor.predict_from_folder(temp_dir)
            print(f"üìã –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {predictions}")
            
            if predictions:
                result_text = predictor.get_and_print_results(predictions, temp_dir)
                print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–∞–ø–∫–∏: '{result_text}'")
            else:
                print("‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 debug_ocr.py <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    debug_ocr(image_path)

if __name__ == '__main__':
    main() 